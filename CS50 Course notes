------------------

CS50 (yt) COURSE

------------------


---- 1. GIT ----

1.1 GITHUB

- Create a Repository
	
	Create from the + button on the top right


- git clone

	git clone <url> , downloads the repository from the url to your computer into the current directory.

	- push hello.html --> to create a .html file in the repository


- git add

	git add <filename> takes some files and tell git that we want to upload those files the next time we make a commit

	- git add hello.html


- git commit

	git commit -m "message" --> take a snapshot of the current state of the repo and prepare them to be uploaded. The message has to describe new changes on the code.

	- git commit -m "Added hello.html"


- git status

	tells you the current status of your repository, if there are files to add or commit to the cloud repo.


- git push

	It pushes all changes made on the local repository to the remote server.

	- git push --> + username and password


- git pull

	Downloads the latest version of the remote repo.

	- Change the hello.html file code frome the github webpage and commit, then do git pull locally from the terminal.


- Merge Conflicts

	Writes in the file where the lines of code are in conflict, first the part from your local repo and then, after the ==== line, the part from the remote repo. You have to delete the undesired parts and leave the wanted ones and git commit.	


- git log

	shows a list with history of all commits made by you


- git reset

	git reset --hard <commit>
	git reset --hard origin/master



1.2 GITHUB PAGES

	- login --> file --> settings --> GitHub Pages --> Source --> master branch



1.3 GITHUB BRANCHING

- git branch

	list of the different branches in the repo


- git branch branchName

	creates a new branch named branchName


- git checkout branchName

	changes the HEAD from the branch where the repo is pointing to the branch branchName


- git merge branchName

	will marge the changes made to the branchName to the master branch 


- git push --set-upstream origin branchName

	push the new nranch created local to also be present on the remote repo



1.4 GITHUB REMOTES

- git fetch

	downloads the new version and the state of the master on the remote repo to your local repo


- git merge origin/master 
	
	updates your local master to the state and commits of the remote master	


- git pull

	(git fetch) + (git merge origin/master)



1.5 GITHUB FORKS

	A separated copy of an entire repo


- Pull Request
	
	request to merge again your changes of the forked repo to the master one




---- 2. HTML ----

- <html> </html>

	an html file has 2 parts: head and body


- <head>

	head data is metadata for the browser and won't be displayed

	- <title>My Web Page!</title>


- <body>

	body data will be displayed


- lists

	- <ul> : Unordered Lists

	- <ol> : Ordered Lists
		
		- <il> : List item (for both types of lists)


- firefox hello.html / google-chrome hello.html 
		
	for display webpage on the browser


- images

	inside <body>

	- <img src="cat.jpg"> --> the src="cat.jpg" is an attribute of the tag 

	- size : <img src="cat.jpg" height="200" width="300"> , if just one of both is given, the other dimension will be proportionally adjusted.

		- also works with percentages --> height=50% , responsive image


- <table>

	- <tr> : Table Row

		- <th> : Table Header

		- <td> : Table Data


- <form>

	take inputs from the user

	- <input type="text" placeholder="Full Name" name="name">

	- <button>Submit!</button>

	- <div>
		<input name="name" type="text" placeholder="Name">
		<input name="password" type="password" placeholder="Password">
  	  </div>

	- <div>
		Favorite color?
		<input name="color" type="radio" value="red"> Red
	  </div>

	- <div>
		<input name="country" list="countries" placeholder="Country">
		<datalist id="countries">
			<option value="Afghanistan">
			<option value="Albania">
			<option value="Algeria">
	  </div>
		


- <p> 
	
	paragraphs


- <a>

	is used to insert a link

	- <body>
		<a href="hello.html">Click here!</a>

		<a href="https://google.com">Google here!</a>

		<a href="#section1">Section 1</a>		--> # links to an id
	  </body>


- HTML5 new tags (old div)

	- <header>
	
	- <nav>

	- <section>

	- <footer>

	- ...
	
	- <audio>

	- <video>

	- <datalist>
			- <div>
				<input name="country" list="countries" placeholder="Country">
				<datalist id="countries">
					<option value="Afghanistan">
					<option value="Albania">
					<option value="Algeria">
	  		  </div>





---- 3. CSS ----

3.1 STYLE

- properties:

	- color --> there are 140 name colors (like red, blue, darkmagenta...) but also RGB hexcodes (like #093c4f)

	- text-align

- <body>
	<h1 style="color:blue;text-align:center;">Welcome to My Web Page!</h1>
  </body>

- <head>
	<style>
		h1 {
			color: blue;
			text-align: center;
		}
	</style>
  </head>


- html and css in separated files:
	- html file:
		  <head>
			<link rel="stylesheet" href="styles.css">
		  </head>

  	- css file (styless.css):
		  h1 {
		  color: blue;
		  text-align: center;
		  }	
		 
		  p {
		  color: red;
		  }



- <div>
	<head>
		<title>My Webpage!</title>
		<style>
			div {

			}
		</style>
	</head>
	<body>
		<div>
			Hello, world!
		</div>
		Hello again!
	</body>

- size 
	div {
		background-color: teal;
		width: 100px;
		height: 400px;
		margin: 30px; 
		padding: 20px; --> margin for text.
	}

- font
	div {
		font-family: Arial, sans-serif;
		font-size: 28px;
		font-weight: bold;
	}


- border
	- div {
		border: 3px solid blue; (or 5px dotted red;)
	  }

	- for tables: 	border-collapse: collapse;
			padding: 5px;
			text-align: center;


- div_span
	- <head>
		  <style>
			#top {
				font-size: 36px;
			}
			#bottom {
				font-size: 12px;
			}
			.name {
				font-weight: bold;
			}			
		  </style>
	  </head>
	  <body>
	  	<div id="top">
			This is the <span class="name">top</span>of my web page.
	  	</div>
		<div id="bottom">
			This is the <span class="name">bottom</span> of my web page.
		</div>
	  </body>
		

- .class
	
	in css a dot designs a class: .name


	- .name {
	 	font-weight: bold;
	} 


- multiple

	- <style>
		h1, h2 {
			color: red;
		}
	  </style>

	- descendant selector (red to list items from the ordered lists and all its descendants): 
	  <style>
		ol li {
			color: red;
		}
	  </style>

	- direct child descendant selector (red to just the inmidiate child of the ordered list items):
	  <style>
		ol > li {
			color: red;
		}
	  </style>


- type of input style
	
	- <style>
		input[type=text] {
			background-color: red;
		}
		input[type=number] {
			background-color: yellow;
		}
	  </style>


- hover over a button change style

	- <style>
		button {
			width: 200px;
			height: 50px;
			font-size: 24px;
			background-color: green;
		}
		button:hover {
			background-color: orange;
		}
	  </style>


- before --> add something before some specific element or type of element

	- <style>
		a::before {
			content: "\21d2 Click here: ";
			font-weight: bold;
		}
	  </style>

  	  adds an arrow and Click here before every link (a)


- selection --> change style of selected elements
	
	- <style>
		p::selection {
			color: red;
			background-color: yellow;
		}
	  </style>


- CSS selectors
	
	a, b 	Multiple Element Selector
	a b	Descendant Selector
	a > b	Child Selector
	a + b	Adjacent Sibling Selector
	[a=b]	Attribute Selector
	a:b 	Pseudoclass Selector
	a::b	Pseudoelement Selector




3.2 RESPONSIVE DESIGN (viewport, Media Queries, Flexbox, Grids)

- Media Queries 
	
	@media  --> creates media queries

	- <meta name="viewport" content="width=device-width, initial-scale=1.0">  --> Adjusts the text and sizes to the size of the device
	  <style>
		@media print {
			.screen-only {
				display: none;
			}
		}
	  </style>	
	  <body>
		<p class="screen-only">This paragraph won't appear when you print this page.</p>
	  </body>
	
	- <meta name="viewport" content="width=device-width, initial-scale=1.0">
	  <style>
		@media (min-width: 500px) {
			body {
				background-color: red;
			}
			h1::before {
				content: "Welcome!";
		}
	  </style>


- Flexbox










	
		
	


